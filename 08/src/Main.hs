{-
Copyright © 2024 Fabian Grubmüller

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-}

module Main where

import Data.Functor ((<&>))
import Data.List (foldl', nub)
import Data.Char (isDigit, isLetter)

main :: IO ()
main = do
    input <- readFile "data/input.txt" <&> lines
    let bounds = liftA2 (,) length (length . head) input
        antennae = foldl' getAntennaePerFrequency [] $ extractAntennae input
    print (f1 bounds antennae, f2 bounds antennae)

newtype Antenna = A Char
    deriving (Eq)

newtype Pos = P (Int, Int)
    deriving (Eq)

readAntenna :: Char -> Maybe Antenna
readAntenna c
    | isDigit c || isLetter c = Just (A c)
    | otherwise = Nothing

-- if current character denotes an antenna, collect it together with the current position
-- intended for use with a column-wise left-fold
extract :: ([(Antenna, Pos)], Pos) -> Char -> ([(Antenna, Pos)], Pos)
extract (antennae, currentPos@(P (x, y))) c = let nextPos = P (x, y + 1) in case readAntenna c of
    Just a -> ((a, currentPos) : antennae, nextPos)
    Nothing -> (antennae, nextPos)

-- collect antennae from the current row
-- intended for use with a row-wise left-fold
extractRow :: ([[(Antenna, Pos)]], Int) -> String -> ([[(Antenna, Pos)]], Int)
extractRow (rows, x) str = (fst (foldl' extract ([], P (x, 1)) str) : rows, x + 1)

extractAntennae :: [String] -> [(Antenna, Pos)]
extractAntennae = concat . fst . foldl' extractRow ([], 1)

-- for each frequency collect the list of positions of antennae with this type
-- intended for use with a left-fold against a [(Antenna, Pos)]
getAntennaePerFrequency :: [(Antenna, [Pos])] -> (Antenna, Pos) -> [(Antenna, [Pos])]
getAntennaePerFrequency acc (a, p) = case filter ((a ==) . fst) acc of
    [] -> (a, [p]) : acc
    [(_, ps)] -> (a, p : ps) : filter ((a /=) . fst) acc

-- maybe gets the next antinode at the position v2 + (v2 - v1) if it is within the bounds where v1 = (x1, y1), v2 = (x2, y2)
getAntinode :: (Int, Int) -> Pos -> Pos -> Maybe Pos
getAntinode (xmax, ymax) (P (x1, y1)) (P (x2, y2)) = let (x, y) = (2 * x2 - x1, 2 * y2 - y1) in
    if 1 <= x && x <= xmax && 1 <= y && y <= ymax
    then Just $ P (x, y)
    else Nothing

-- returns all positions on the discrete ray starting from y and going in the direction y - x that are within the bounds
getAntinodeRay :: (Int, Int) -> Pos -> Pos -> [Pos]
getAntinodeRay bounds x y = getAntinodeRay' bounds x [y] where
    getAntinodeRay' :: (Int, Int) -> Pos -> [Pos] -> [Pos]
    getAntinodeRay' bounds x acc@(y : _) = case getAntinode bounds x y of
        Just p -> getAntinodeRay' bounds y (p : acc)
        Nothing -> acc

-- returns how many unique antinodes there are, given a function that computes the antinodes from a discrete (possible) antinode ray generated by two antennae of the same frequency
f :: ([Pos] -> [Pos]) -> (Int, Int) -> [(Antenna, [Pos])] -> Int
f g bounds = length . nub . concatMap (\ (_, as) -> concatMap (g . uncurry (getAntinodeRay bounds)) ([(x, y) | x <- as, y <- as, x /= y]))

f1 :: (Int, Int) -> [(Antenna, [Pos])] -> Int
f1 = f (take 1)

f2 :: (Int, Int) -> [(Antenna, [Pos])] -> Int
f2 = f id
